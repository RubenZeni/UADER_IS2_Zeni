En esta ocasión imaginé una situación en la que una empresa necesita generar interfaces gráficas distintas según el sistema operativo (por ejemplo, Windows, macOS y Linux) para la factura del punto 4. Cada sistema tiene su propio estilo de botones, menús y ventanas, pero todos deben cumplir la misma lógica funcional. El patrón Abstract Factory resulta útil porque permite crear familias de objetos relacionados (como botones y menús) sin especificar sus clases concretas. Así, el código cliente puede construir toda la interfaz compatible con un sistema operativo sin depender de sus implementaciones internas. Esto favorece la extensibilidad y el mantenimiento del sistema, ya que cambiar la familia de objetos sólo requiere modificar la fábrica abstracta usada.
